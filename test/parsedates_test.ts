import { DetectAndHandleDates, getDateRange_test, parseDates_test, sanitizeDates_test } from "../src/parsedates.ts";

import { assertEquals } from "../test_deps.ts";

Deno.test("Sanitize a range of dates", () => {
  const dates: Record<string, string> = {
    "Παρασκευή, 28 Απριλίου 2023": "παρασκευή,28απριλίου2023",
    "Πέμπτη, 27 Απριλίου 2023": "πέμπτη,27απριλίου2023",
    "Τετάρτη, 26 Απριλίου 2023": "τετάρτη,26απριλίου2023",
    "Τρίτη, 25 Απριλίου 2023": "τρίτη,25απριλίου2023",
    "Σάββατο έως Δευτέρα, 22 έως 24 Απριλίου 2023": "σάββατοέωςδευτέρα,22έως24απριλίου2023",
    "Παρασκευή, 21 Απριλίου 2023": "παρασκευή,21απριλίου2023",
    "Πέμπτη, 20 Απριλίου 2023": "πέμπτη,20απριλίου2023",
    "Τετάρτη, 19 Απριλίου 2023": "τετάρτη,19απριλίου2023",
    "Τρίτη, 18 Απριλίου 2023": "τρίτη,18απριλίου2023",
    "Σάββατο εως Δευτέρα, 15 εως 17 Απριλίου 2023": "σάββατοεωςδευτέρα,15εως17απριλίου2023",
  };
  for (const date in dates) {
    assertEquals(sanitizeDates_test(date), dates[date]);
  }
});

Deno.test("Parse normalized dates", () => {
  const dates: Record<string, Date[]> = {
    "παρασκευή,28απριλίου2023": [new Date("2023-04-28T00:00:00.000Z")],
    "πέμπτη,27απριλίου2023": [new Date("2023-04-27T00:00:00.000Z")],
    "τετάρτη,26απριλίου2023": [new Date("2023-04-26T00:00:00.000Z")],
    "τρίτη,25απριλίου2023": [new Date("2023-04-25T00:00:00.000Z")],
    "σάββατοέωςδευτέρα,22έως24απριλίου2023": [
      new Date("2023-04-24T00:00:00.000Z"),
      new Date("2023-04-22T00:00:00.000Z"),
      new Date("2023-04-23T00:00:00.000Z"),
    ],
    "παρασκευή,21απριλίου2023": [new Date("2023-04-21T00:00:00.000Z")],
    "πέμπτη,20απριλίου2023": [new Date("2023-04-20T00:00:00.000Z")],
    "τετάρτη,19απριλίου2023": [new Date("2023-04-19T00:00:00.000Z")],
    "τρίτη,18απριλίου2023": [new Date("2023-04-18T00:00:00.000Z")],
    "σάββατοεωςδευτέρα,15εως17απριλίου2023": [
      new Date("2023-04-17T00:00:00.000Z"),
      new Date("2023-04-15T00:00:00.000Z"),
      new Date("2023-04-16T00:00:00.000Z"),
    ],
  };
  for (const date in dates) {
    assertEquals(parseDates_test(date), dates[date]);
  }
});

Deno.test("Test getDateRange", () => {
  const dates: Record<string, string[]> = {
    "παρασκευή,28απριλίου2023": ["παρασκευή,28απριλίου2023"],
    "πέμπτη,27απριλίου2023": ["πέμπτη,27απριλίου2023"],
    "τετάρτη,26απριλίου2023": ["τετάρτη,26απριλίου2023"],
    "τρίτη,25απριλίου2023": ["τρίτη,25απριλίου2023"],
    "σάββατοέωςδευτέρα,22έως24απριλίου2023": ["σάββατο,22απριλίου2023", "δευτέρα,24απριλίου2023"],
    "παρασκευή,21απριλίου2023": ["παρασκευή,21απριλίου2023"],
    "πέμπτη,20απριλίου2023": ["πέμπτη,20απριλίου2023"],
    "τετάρτη,19απριλίου2023": ["τετάρτη,19απριλίου2023"],
    "τρίτη,18απριλίου2023": ["τρίτη,18απριλίου2023"],
    "σάββατοεωςδευτέρα,15εως17απριλίου2023": ["σάββατο,15απριλίου2023", "δευτέρα,17απριλίου2023"],
  };
  for (const date in dates) {
    assertEquals(getDateRange_test(date), dates[date]);
  }
});

Deno.test("Detect and parse a range of dates", () => {
  const dates: Record<string, Date[]> = {
    "nopethisisnothing": [],
    "Παρασκευή, 28 Απριλίου 2023": [new Date("2023-04-28T00:00:00.000Z")],
    "Πέμπτη, 27 Απριλίου 2023": [new Date("2023-04-27T00:00:00.000Z")],
    "Σάββατο εως Δευτέρα, 15 εως 17 Απριλίου 2023": [
      new Date("2023-04-17T00:00:00.000Z"),
      new Date("2023-04-15T00:00:00.000Z"),
      new Date("2023-04-16T00:00:00.000Z"),
    ],
  };
  for (const date in dates) {
    assertEquals(DetectAndHandleDates(date), dates[date]);
  }
});
